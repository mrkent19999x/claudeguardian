# watchdog-fixed.ps1 ‚Äî Watchdog t·ªëi ∆∞u, kh√¥ng v√≤ng l·∫∑p
param(
  [string[]]$WatchRoots,
  [string]$WhitelistPath = "C:\GotXMLs\whitelist.json",
  [string]$LogPath = "C:\GotXMLs\xml_guard_log.csv",
  [int]$CheckInterval = 30,  # Ki·ªÉm tra m·ªói 30s thay v√¨ 1s
  [int]$MaxRetries = 3,      # Gi·ªõi h·∫°n retry
  [int]$CooldownPeriod = 60  # Ngh·ªâ 60s sau khi retry h·∫øt
)

$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$guardPath = Join-Path $scriptDir "watch-xml-guard-fixed.ps1"
if (!(Test-Path $guardPath)) { 
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y: $guardPath"
    exit 1 
}

# N·∫øu WatchRoots r·ªóng, ƒë·ªÉ r·ªóng; guard s·∫Ω t·ª± l·∫•y t·∫•t c·∫£ ·ªï ƒëƒ©a
$rootArgs = @()
if ($WatchRoots -and $WatchRoots.Count -gt 0) {
  foreach ($r in $WatchRoots) { $rootArgs += "-WatchRoots `"$r`"" }
}

function Is-Running {
  try {
    $procs = Get-CimInstance Win32_Process -Filter "Name='powershell.exe'" -ErrorAction SilentlyContinue
    foreach ($p in $procs) {
      if ($p.CommandLine -match [Regex]::Escape($guardPath)) { 
        return $true 
      }
    }
    return $false
  } catch { 
    return $false 
  }
}

function Start-GuardProcess {
  try {
    $args = @("-ExecutionPolicy Bypass","-File `"$guardPath`"","-WhitelistPath `"$WhitelistPath`"","-LogPath `"$LogPath`"","-Enforce")
    $args += $rootArgs
    
    # Kh·ªüi ƒë·ªông v·ªõi priority th·∫•p
    $process = Start-Process powershell -ArgumentList ($args -join " ") -PassThru -WindowStyle Hidden
    $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::BelowNormal
    
    Write-Host "‚úÖ Kh·ªüi ƒë·ªông XML Guard th√†nh c√¥ng (PID: $($process.Id))"
    return $true
  } catch {
    Write-Host "‚ùå L·ªói kh·ªüi ƒë·ªông XML Guard: $_"
    return $false
  }
}

# MAIN WATCHDOG - T·ªëi ∆∞u
Write-Host "üîÑ Watchdog kh·ªüi ƒë·ªông - Ki·ªÉm tra m·ªói $CheckInterval gi√¢y"
$retryCount = 0
$lastStartTime = Get-Date

while ($true) {
  try {
    if (-not (Is-Running)) {
      $currentTime = Get-Date
      $timeSinceLastStart = ($currentTime - $lastStartTime).TotalSeconds
      
      # Ki·ªÉm tra cooldown period
      if ($timeSinceLastStart -lt $CooldownPeriod) {
        Write-Host "‚è≥ ƒêang trong cooldown period ($([math]::Round($CooldownPeriod - $timeSinceLastStart))s c√≤n l·∫°i)"
        Start-Sleep -Seconds $CheckInterval
        continue
      }
      
      Write-Host "üîÑ XML Guard kh√¥ng ch·∫°y - Th·ª≠ kh·ªüi ƒë·ªông l·∫°i... (L·∫ßn $($retryCount + 1)/$MaxRetries)"
      
      if (Start-GuardProcess) {
        $retryCount = 0
        $lastStartTime = Get-Date
        Write-Host "‚úÖ XML Guard ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng"
      } else {
        $retryCount++
        if ($retryCount -ge $MaxRetries) {
          Write-Host "‚ùå ƒê√£ th·ª≠ $MaxRetries l·∫ßn - D·ª´ng watchdog"
          break
        }
      }
    } else {
      # Reset retry count n·∫øu process ƒëang ch·∫°y
      if ($retryCount -gt 0) {
        $retryCount = 0
        Write-Host "‚úÖ XML Guard ƒëang ch·∫°y b√¨nh th∆∞·ªùng"
      }
    }
    
    # Sleep th√¥ng minh - kh√¥ng ng·ªën CPU
    Start-Sleep -Seconds $CheckInterval
    
  } catch {
    Write-Host "‚ùå L·ªói trong watchdog: $_"
    Start-Sleep -Seconds 60  # Ngh·ªâ 1 ph√∫t khi c√≥ l·ªói
  }
}

Write-Host "üõë Watchdog d·ª´ng"
